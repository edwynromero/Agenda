video1

como se crea un proyecto laravel?
entrar al cmd y colocar lararavel new nombre del proyecto

como se instala la herramienta de autenticacion?
php artisan make:auth //este agrega bootstrap al proyecto y lo demas, agrega un par de vistas.

se crea la base de datos

Luego en el archivo .env
se coloca el nombre de la base de datos, el usuario y la clave.

Asi se ingresa al sistema
localhost:8000


como se corren las migraciones?
con el comando php artisan migrate

luego el comando php artisan make:migration initalization



luego abrir la carpeta migrations y el archivo
initalization.php

crear las tablas en el metodo up()
revisar esto en la pagina de laravel(migration)

luego de terminar las tablas en este metodo ejecutar el comando php artisan migrate
listo





video2
crear el primer controlador
php artisan make:controller InvoiceController
Ingresar a este archivo y escribir la primera ruta:
public function index()
{
 return view('invoice.index');

}

crear una carpeta llamada invoice en las vistas en el resource.
creamos el index.blade.php, haciendo copia del archivo login.blade


luego nos vamos a app/http/routes.php
colocar la ruta del invoice:

Route::get('invoice','InvoiceController@index');
ya creamos una ruta

ahora modificamos la vista como nosotros queramos
esto lo saco del archivo para no complicarme. indagar para ver como se hacen otras cosas que no puedo abarcar aqui tambien.


luego vamos al InvoiceController
creamos el metodo:

public function add(invoice)
{
return view('invoice.add');
}

luego creamos la ruta a esta vista.
Route::get('/invoice/add','InvoiceController@add');

Luego creamos el archivo add.blade.php
escribir el codigo del archivo aqui.

Ahora vamos a la consola y entramos a la carpeta public y instalamos bower, con el comando npm install bower -g buscar no esta completo, luego agregar las dependencias bower install riot,

"Revisar las guias de como trabajar con el bower"

se creo una carpeta llamada bower_components, agregarla al layouts, en el archivo app.blade.php
en la parte donde se agregan los scripts ejemplo
<script> src="{{uro('bower/components/riot/riot.min.js')}}" </script>
<script> src="{{uro('bower/components/riot/riot-compiler.min.js')}}" </script>

se agregaron los 2 archivos de la carpeta bower_components

revisar si estan instalados los archivos.

luego en el mismo archivo app.blade 
agregar el @yield('bottom') para que aparezca apartir de este nivel el javascript.

Ahora vamos agregar una carpeta dentro de public, esta se va llamar components  esta va contener todos los componentes que vallamos a crear,
crear un archivo que se llama invoice.tag,

dentro del archivo crear las etiquetas <invoice></invoice>, dentro de ellas realizar
el layouts que me mostrara las vistas del add, ver el maquetado del archivo invoice.tag

revisar como esta compuesto el archivo invoive.tag
dentro de este archivo hacer:

ingresar la etiqueta <invoice></invoice> en la parte que queramos de la pagina all√≠ es donde va aparecer el componente que es el invoice.tag

Lo agregamos tambien con el siguiente codigo
<script src"{{asset('components/invoice.tag')}}" type="riot/tag"></script>
<script> 
$(document).ready(function(){
riot.mount('invoice');
})
</script>

 



video3
video4
video5
video 5

componente invoice.tag
pasar la variable self al controlador
crear una funcion riot llamada 

__save(){
}
crear el boton que se encargue de guardar onclick q llame al save.

probarlo, tiene que dar todo los campos en el depurador del navegador.

proximo paso seguir trabajando con la funcion riot para el metodo __save

__save(){
$.post(baseUrl('invoice/save'), {
client_id: self.client_id,
iva:self.iva,
subTotal:self.subTotal,
total:self.total
detail:self.detail
}, funtion(r){

}, 'json')
}

no va  a registrar todavia  pero ver lo que pasa por el depurador.


crear la ruta en el archivo route

Route::post('invoice/save','InvoiceController@save');

Ahora nos dirijimos al InvoiceController, para capturar los valores del js.


public function save(Request $req)
{
$data= (object) [ 
'iva' => $req->input('iva'),
'subTotal' => $req->input('subTotal'),
'total' => $req->input('total'),
'client_id' => $req->input('client_id'),
'detail'  =>  $req->input('detail')
];

return $data;

}

crear el archivo ini.js
para inicializar el ajax en laravel:

ahora colocar el token
en el archivo app.blade 
colocar el meta
y abajo en los script colocar la ruta del ini.js

ahora si va agregar las peticiones con el token.

le hacemos un var_dump($data); para probar.



crear el InvoiceRepository

namespace App\Repositories;

use App\invoice;

class InvoiceRepository{
private $model;

public function __construct(){
	$this->model = new Invoice();
}
public funtion save($q) {
	return $this->model->where('name','like',"%$q%")
	->get();

 }

}

crear el model InvoiceItem


class InvoiceItem extends Model{

}


crear la relacion en Invoice

class Invoice extends Model{
public funtion detail(){

	return $this->hasMany('App\InvoiceItem');
}
}

vamos al InvoiceRepository


namespace App\Repositories;

use App\invoice;

class InvoiceRepository{
private $model;

public function __construct(){
	$this->model = new Invoice();
}
public funtion save($q) {

$this->model->iva = $data->iva;
$this->model->subTotal = $data->subTotal;
$this->model->total = $data->total;
$this->model->client_id = $data->client_id;
$this->model->detail = $data->detail;

$this->save();

$this->model->detail()->saveMany([
new App\Commnent(['message'=>'A new comment']),
new App\Commnent(['message'=>'Another comment']),
]);
 }

}



luego vamos al InvoiceController


public function save(Request $req)
{
$data= (object) [ 
'iva' => $req->input('iva'),
'subTotal' => $req->input('subTotal'),
'total' => $req->input('total'),
'client_id' => $req->input('client_id'),
'detail'  => []
];
foreach($req->input('detail') as d) {
$d->detail[] = {
'product_id' => $d->id,
'quantity' => $d->quantity,
'unitPrice' => $d->unitPrice,
'total' => $d->total

};
}

}

Ahora vamos al InvoiceRepository

class InvoiceRepository{
private $model;

public function __construct(){
	$this->model = new Invoice();
}
public funtion save($q) {
$return = (object)[
	'response' => false
];

$this->model->iva = $data->iva;
$this->model->subTotal = $data->subTotal;
$this->model->total = $data->total;
$this->model->client_id = $data->client_id;
$this->model->detail = $data->detail;

$this->model->save();
foreach($data->detail as $d){
$obj = new InvoiceItem;
$obj->product_id = $d->product_id;
$obj->quantity = $d->quantity;
$obj->UnitPrice = $d->unitPrice;
$obj->total = $d->total;

$detail[] = $obj;
}

$this->model->detail()->saveMany(
$detail);
$return->response = true;

return $return;
 }

}

Luego vamos al InvoiceController y agregar la variable.
InvoiceRepository a todo lo que tenga que ver con el.


en el InvoiceController 

public function save(Request $req)
{
$data= (object) [ 
'iva' => $req->input('iva'),
'subTotal' => $req->input('subTotal'),
'total' => $req->input('total'),
'client_id' => $req->input('client_id'),
'detail'  => []
];
foreach($req->input('detail') as d) {
$data->detail[] = (object){
'product_id' => $d['id'],
'quantity' => $d['quantity'],
'unitPrice' => $d['price'],
'total' => $d['total']

};
}
$this->invoiceRepo->save($data);
}

agregar el namespace 

hasta aqui ya inserta


ahora hay que realizar la transaccion
apartir del minuto 32

video6
comenzamos validando el botom de guardar que esta en invoice tag
button if={detail.length > 0 && client_id >0} onclick ={__save} + bootstrap

hacer el listado
invoice repository

public function getAll(){
 return $this->model->get();
}


ahora vamos al invoicecontroller

public function index(){
return view( 
'invoice.index', [
		'model' => $this->invoiceRepo->getAll()
]
);
}

ahora ir a la vista 

quitamos el foreach que esta en el index

colocamos el nuevo foreach

@foreach ($model as m)
esto lo veo luego es algo asi
donde va el  {{number_format($m->iva, 2)}}
{{number_format($m->subTotal, 2)}}
{{number_format($m->total, 2)}}
@endforeach

ahora vamos al modelo invoice para crear la relacion 

public function client(){
return $this->belonsTo('App\Client');
}

luego colocamos 
donde decia cliente en el index lo siguiente:

<a href="{{url('invoice/detail' . $m->id)}}">{{ $m->client->name}}"</a>
listo hasta aqui.




video7


video8

video 7
vamos al archivo routes.php y creamos una ruta.
Route::get('/invoice/detail/{$id}', 'InvoiceController@detail');

Luego vamos al invoicecontroller
creamos el metodo detail

public function detail($id)
{
	return view('invoice.detail');
}

Ahora vamos para crear la vista
detail.blade.php

copiar todo lo del invoice.tag
lo adaptamos a nuestro proyecto

copiar el que esta terminado

Luego en invoiceRepository
hacer el metodo get

ahora al invoice controller
en el metodo detail hacer un array

Luego ir a la vista y copiar el contador para los comprobantes

Luego ir rellenando los campos.

Luego ir al invoice repository y agregarle al metodo get all el order_by 
Listo.









video 8

laravel dompdf descargar
vamos a config app.php
agregamos una lineas.


creamos una nueva ruta
Route::get('/invoice/pdf/{$id}', 'InvoiceController@pdf');

vamos a invoice controller y creamos el metodo pdf

vamos al index y creamos el botom descargar 


